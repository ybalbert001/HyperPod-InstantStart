AWSTemplateFormatVersion: '2010-09-09'
Description: 'Simplified CloudFormation template for EKS HYPD setup'

Parameters:
  InstanceName:
    Type: String
    Default: eks-hypd-dev-instance
    Description: Name for the EC2 instance
    
  InstanceType:
    Type: String
    Default: m5.xlarge
    Description: EC2 instance type (e.g., c5.xlarge, m5.xlarge, t3.large)
    
  KeyPairName:
    Type: String
    Default: yourkeypair
    Description: Name of the EC2 KeyPair for SSH access
    
  EBSVolumeSize:
    Type: Number
    Default: 200
    MinValue: 8
    MaxValue: 16384
    Description: Size of the EBS root volume in GB (minimum 8 GB, maximum 16384 GB)
    
  VpcId:
    Type: String
    Default: ""
    Description: VPC ID where the instance will be launched (leave empty for default VPC)
    
  SubnetId:
    Type: String  
    Default: ""
    Description: Subnet ID where the instance will be launched (leave empty for default subnet)
    
  SecurityGroupId:
    Type: String
    Default: ""
    Description: Security Group ID to use (required when VpcId/SubnetId are specified, leave empty for default VPC)
    
  ResourceTag:
    Type: String
    Default: hypd-dev
    Description: Resource tag prefix for naming resources (e.g., hypd-dev, eks-prod)
    
  LatestUbuntu2204AMI:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/canonical/ubuntu/server/22.04/stable/current/amd64/hvm/ebs-gp2/ami-id
    Description: Latest Ubuntu 22.04 LTS AMI ID

Conditions:
  HasVpcId: !Not [!Equals [!Ref VpcId, ""]]
  HasSubnetId: !Not [!Equals [!Ref SubnetId, ""]]
  HasSecurityGroupId: !Not [!Equals [!Ref SecurityGroupId, ""]]
  UseCustomVpc: !And 
    - !Condition HasVpcId
    - !Condition HasSubnetId
    - !Condition HasSecurityGroupId
  UseDefaultVpc: !Not [!Condition UseCustomVpc]

Resources:
  # S3 Bucket for HYPD resources
  HYPDUserBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${ResourceTag}-s3-${AWS::Region}'
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: Name
          Value: !Sub '${ResourceTag}-bucket'

  # IAM Role
  EKSPlusHYPDAdminRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ResourceTag}-admin-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
                - ecr.amazonaws.com
                - eks.amazonaws.com
                - bedrock.amazonaws.com
                - cloudformation.amazonaws.com
                - sagemaker.amazonaws.com
            Action:
              - sts:AssumeRole
          - Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess

  # Instance Profile
  HYPDInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub 'instance-profile-${EKSPlusHYPDAdminRole}'
      Roles:
        - !Ref EKSPlusHYPDAdminRole

  # Security Group (only for default VPC)
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: UseDefaultVpc
    Properties:
      GroupName: !Sub '${ResourceTag}-entry-sg'
      GroupDescription: Security group for entry instance
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 3099
          ToPort: 3099
          CidrIp: 0.0.0.0/0

  # EC2 Instance
  EC2Instance:
    Type: AWS::EC2::Instance
    DependsOn: 
      - HYPDUserBucket
      - HYPDInstanceProfile
    Properties:
      ImageId: !Ref LatestUbuntu2204AMI
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyPairName
      IamInstanceProfile: !Ref HYPDInstanceProfile
      SecurityGroupIds: !If [UseCustomVpc, !Ref "AWS::NoValue", [!Ref SecurityGroup]]
      NetworkInterfaces: !If 
        - UseCustomVpc
        - - AssociatePublicIpAddress: true
            DeviceIndex: 0
            SubnetId: !Ref SubnetId
            GroupSet: [!Ref SecurityGroupId]
        - !Ref "AWS::NoValue"
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeType: gp3
            VolumeSize: !Ref EBSVolumeSize
            DeleteOnTermination: true
            Encrypted: true
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          
          # Create log file
          LOG_FILE="/var/log/dependency-install.log"
          exec > >(tee -a $LOG_FILE)
          exec 2>&1
          
          echo "Starting dependency installation at $(date)"
          
          apt-get update -y
          apt-get install -y zip unzip curl wget python3-pip docker.io jq s3fs
          
          systemctl start docker
          systemctl enable docker
          usermod -aG docker ubuntu
          chmod 666 /var/run/docker.sock
          
          pip3 install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-py3-latest.tar.gz
          
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          ./aws/install --update
          rm -rf awscliv2.zip aws/
          
          sudo -u ubuntu aws configure set region ${AWS::Region}
          sudo -u ubuntu aws configure set output json
          
          curl -O https://s3.us-west-2.amazonaws.com/amazon-eks/1.30.4/2024-09-11/bin/linux/amd64/kubectl
          chmod +x ./kubectl
          mv ./kubectl /usr/local/bin/
          
          ARCH=amd64
          PLATFORM=$(uname -s)_$ARCH
          curl -sLO "https://github.com/eksctl-io/eksctl/releases/latest/download/eksctl_$PLATFORM.tar.gz"
          tar -xzf eksctl_$PLATFORM.tar.gz -C /tmp
          rm eksctl_$PLATFORM.tar.gz
          mv /tmp/eksctl /usr/local/bin
          
          curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
          chmod 700 get_helm.sh
          ./get_helm.sh
          rm get_helm.sh
          
          # curl -LsSf https://astral.sh/uv/install.sh | sh
          sudo -u ubuntu curl -LsSf https://astral.sh/uv/install.sh | sudo -u ubuntu sh
          echo 'export PATH="$HOME/.local/bin:$PATH"' >> /home/ubuntu/.bashrc
          chown ubuntu:ubuntu /home/ubuntu/.bashrc
          
          curl "https://s3.amazonaws.com/session-manager-downloads/plugin/latest/ubuntu_64bit/session-manager-plugin.deb" -o "session-manager-plugin.deb"
          dpkg -i session-manager-plugin.deb
          rm session-manager-plugin.deb
          
          mkdir -p /home/ubuntu/workspace/s3
          chown -R ubuntu:ubuntu /home/ubuntu/workspace
          
          # Configure fuse for allow_other
          echo "user_allow_other" >> /etc/fuse.conf
          
          # S3_BUCKET_NAME="${ResourceTag}-bucket-${AWS::AccountId}-${AWS::Region}"
          S3_BUCKET_NAME="${ResourceTag}-s3-${AWS::Region}"
          
          # Add to fstab for persistent mounting
          echo "$S3_BUCKET_NAME /home/ubuntu/workspace/s3 fuse.s3fs _netdev,iam_role=${EKSPlusHYPDAdminRole},allow_other,uid=1000,gid=1000 0 0" >> /etc/fstab
          
          sudo -u ubuntu s3fs $S3_BUCKET_NAME /home/ubuntu/workspace/s3 -o iam_role=${EKSPlusHYPDAdminRole}
          
          sudo -u ubuntu touch /home/ubuntu/workspace/s3/$S3_BUCKET_NAME
          
          chown -R ubuntu:ubuntu /home/ubuntu/
          
          echo "Installation completed at $(date)"
          
          /usr/local/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource EC2Instance --region ${AWS::Region}
      Tags:
        - Key: Name
          Value: !Sub '${ResourceTag}-instance'
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT15M

Outputs:
  InstanceId:
    Value: !Ref EC2Instance
    Description: EC2 Instance ID
  InstancePublicIP:
    Value: !GetAtt EC2Instance.PublicIp
    Description: Public IP address of the EC2 instance
  S3BucketName:
    Value: !Ref HYPDUserBucket
    Description: Name of the created S3 bucket
  S3BucketArn:
    Value: !GetAtt HYPDUserBucket.Arn
    Description: ARN of the created S3 bucket
  IAMRoleName:
    Value: !Ref EKSPlusHYPDAdminRole
    Description: Name of the IAM role
  IAMRoleArn:
    Value: !GetAtt EKSPlusHYPDAdminRole.Arn
    Description: ARN of the IAM role
  InstanceProfileName:
    Value: !Ref HYPDInstanceProfile
    Description: Name of the Instance Profile
  InstanceProfileArn:
    Value: !GetAtt HYPDInstanceProfile.Arn
    Description: ARN of the Instance Profile
  SecurityGroupId:
    Condition: UseDefaultVpc
    Value: !Ref SecurityGroup
    Description: Security Group ID (only for default VPC)
